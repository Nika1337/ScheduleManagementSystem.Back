// <auto-generated />
using System;
using Infrastructure.Data.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Domain.Migrations
{
    [DbContext(typeof(DomainContext))]
    [Migration("20250304194907_DomainInit")]
    partial class DomainInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Models.PendingScheduleChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("NewDate")
                        .HasColumnType("date");

                    b.Property<int>("NewPartOfDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequestDateTime");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("PendingScheduleChanges");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobToPerformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleOfWorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ScheduledAtDate")
                        .HasColumnType("date");

                    b.Property<int>("ScheduledAtPartOfDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobToPerformId");

                    b.HasIndex("ScheduleOfWorkerId");

                    b.HasIndex("ScheduledAtDate");

                    b.HasIndex("ScheduleOfWorkerId", "ScheduledAtDate");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Domain.Models.PendingScheduleChange", b =>
                {
                    b.HasOne("Domain.Models.Schedule", "ScheduleToChange")
                        .WithOne("PendingScheduleChange")
                        .HasForeignKey("Domain.Models.PendingScheduleChange", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleToChange");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Job", "JobToPerform")
                        .WithMany()
                        .HasForeignKey("JobToPerformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Worker", "ScheduleOfWorker")
                        .WithMany()
                        .HasForeignKey("ScheduleOfWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobToPerform");

                    b.Navigation("ScheduleOfWorker");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Navigation("PendingScheduleChange");
                });
#pragma warning restore 612, 618
        }
    }
}
